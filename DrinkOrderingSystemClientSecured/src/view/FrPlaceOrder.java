/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import drinkorderingsystemclient.ClientHandler;
import java.awt.GridLayout;
import java.awt.Image;
import java.net.InetAddress;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import model.Customer;
import model.Drink;
import model.Order;
import model.OrderDetail;
/**
 *
 * @author ADMIN
 */
public class FrPlaceOrder extends javax.swing.JFrame {
    private Customer customer;
    private String customerId;
    private ArrayList<Drink> drinks;
    private ArrayList<Order> orders;
    /**
     * Creates new form FrPlaceOrder
     */
    public FrPlaceOrder() {
        this.customerId = String.valueOf(11);
        this.drinks = new ArrayList<>();
        initComponents();
        displayDrinks();
        displayOrders();
        setupOrderTableSelectionListener();
    }
    
    public FrPlaceOrder(String id) {
        this.customerId = id;
        this.drinks = new ArrayList<>();
        initComponents();
        displayDrinks();
        displayOrders();
        setupOrderTableSelectionListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jBillTable = new javax.swing.JTable();
        jPanelDrinks = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jBtnPlaceOrder = new javax.swing.JButton();
        jTotal = new javax.swing.JLabel();
        jBtnDeleteItem = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jOrderDetailsTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jOrderHistoryTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBillTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBillTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product name", "Quantity", "Price", "Sub total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jBillTable.setRowHeight(30);
        jScrollPane1.setViewportView(jBillTable);

        jPanelDrinks.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanelDrinksLayout = new javax.swing.GroupLayout(jPanelDrinks);
        jPanelDrinks.setLayout(jPanelDrinksLayout);
        jPanelDrinksLayout.setHorizontalGroup(
            jPanelDrinksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 452, Short.MAX_VALUE)
        );
        jPanelDrinksLayout.setVerticalGroup(
            jPanelDrinksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Total:");

        jBtnPlaceOrder.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnPlaceOrder.setText("Order");
        jBtnPlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPlaceOrderActionPerformed(evt);
            }
        });

        jTotal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTotal.setText("0");

        jBtnDeleteItem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnDeleteItem.setText("Delete Item");
        jBtnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDeleteItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanelDrinks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnDeleteItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBtnPlaceOrder)
                        .addGap(31, 31, 31))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanelDrinks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTotal)
                            .addComponent(jBtnPlaceOrder)
                            .addComponent(jBtnDeleteItem))
                        .addGap(16, 16, 16))))
        );

        jTabbedPane1.addTab("Place an order", jPanel1);

        jOrderDetailsTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jOrderDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drink name", "Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jOrderDetailsTable.setColumnSelectionAllowed(true);
        jScrollPane3.setViewportView(jOrderDetailsTable);
        jOrderDetailsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jOrderHistoryTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jOrderHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "CustomerId", "Date", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jOrderHistoryTable);
        jOrderHistoryTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(142, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Order history", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 865, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jBtnPlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPlaceOrderActionPerformed
        // TODO add your handling code here:
        try {
            DefaultTableModel model = (DefaultTableModel) jBillTable.getModel();
            ArrayList<OrderDetail> orderDetails = new ArrayList<>();

            for (int i = 0; i < model.getRowCount(); i++) {
                int drinkId = (int) model.getValueAt(i, 0);
                int quantity = (int) model.getValueAt(i, 2);
                orderDetails.add(new OrderDetail(0, 0, drinkId, quantity));
            }
            String hostname = InetAddress.getLocalHost().getHostName();
            
            // Tạo đơn hàng
            
            Order newOrder = new Order(0, Integer.parseInt(customerId), hostname, "Pending", java.time.LocalDate.now().toString(), orderDetails);

            // Place order
            try (ClientHandler clientHandler = new ClientHandler("localhost", 12345)) {
                clientHandler.sendEncryptedCommand("PLACE_ORDER");
                clientHandler.sendObject(newOrder);
            }
            model.setRowCount(0);
            JOptionPane.showMessageDialog(null, "Order has been placed");
            displayDrinks();
            displayOrders();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Failed to place order: " + e.getMessage());
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_jBtnPlaceOrderActionPerformed

    private void jBtnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDeleteItemActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jBillTable.getModel();
        if(jBillTable.getSelectedRowCount() == 1){
            model.removeRow(jBillTable.getSelectedRow());
            calculateTotal();
        }else if(jBillTable.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "Table is empty");
        }
        else JOptionPane.showMessageDialog(null, "Please select item to delete");
    }//GEN-LAST:event_jBtnDeleteItemActionPerformed
    
    //--------------- DRINKS ---------------
    private void displayDrinks() {
        this.drinks = getAllDrinks();
        // Hiển thị các Drink như menu nút
        jPanelDrinks.removeAll();
        jPanelDrinks.setLayout(new GridLayout(0, 3, 10, 10)); // Hiển thị dạng lưới

        for (Drink drink : drinks) {
            JButton drinkButton = new JButton();

            // Đặt hình ảnh vào nút
            ImageIcon icon = new ImageIcon(drink.getImgPath());
            Image img = icon.getImage().getScaledInstance(50, 100, Image.SCALE_SMOOTH);
            drinkButton.setIcon(new ImageIcon(img));

            // Đặt tên nút là tên đồ uống
            drinkButton.setText(String.valueOf(drink.getName()));
            drinkButton.setVerticalTextPosition(SwingConstants.BOTTOM);
            drinkButton.setHorizontalTextPosition(SwingConstants.CENTER);
            drinkButton.setFocusPainted(false);
            
             // Vô hiệu hóa nút nếu đồ uống không khả dụng
            if (!drink.isAvailable()) {
                drinkButton.setEnabled(false);
            } else {
                // Sự kiện khi người dùng nhấn vào nút
                drinkButton.addActionListener(e -> addDrinkToOrder(drink));
                drinkButton.setFocusPainted(false);
            }
            
            // Thêm nút vào panel
            jPanelDrinks.add(drinkButton);
        }
        jPanelDrinks.revalidate();
        jPanelDrinks.repaint();
    } 
        
    private ArrayList getAllDrinks(){
        ArrayList<Drink> drinks = new ArrayList<>();
        try (ClientHandler clientHandler = new ClientHandler("localhost", 12345)){
            clientHandler.sendEncryptedCommand("MENU");
            drinks = (ArrayList<Drink>) clientHandler.getArrayObject();
        } catch (Exception e) {
            System.out.println(e);
            e.printStackTrace();
            return null;
        }
        return drinks;
    }
    
    private void calculateTotal() {
        double total = 0;
        DefaultTableModel model = (DefaultTableModel) jBillTable.getModel();

        // Duyệt qua tất cả các hàng trong bảng
        for (int i = 0; i < model.getRowCount(); i++) {
            double subTotal = (double) model.getValueAt(i, 4); // Lấy giá trị cột Sub total
            total += subTotal; // Cộng dồn
        }

        // Hiển thị tổng giá trị trong JLabel jTotal
        jTotal.setText(String.format("%.2f", total));
    }
    
    private void addDrinkToOrder(Drink drink) {
        DefaultTableModel model = (DefaultTableModel) this.jBillTable.getModel();

        // Kiểm tra xem đồ uống đã tồn tại trong bảng hay chưa
        for (int i = 0; i < model.getRowCount(); i++) {
            int id = (int) model.getValueAt(i, 0);
            // if(!id)    continue;
            if (id == drink.getId()) {
                // Nếu đã tồn tại, tăng số lượng lên 1
                int quantity = (int) model.getValueAt(i, 2) + 1;
                if(quantity > drink.getQuantity()){
                    JOptionPane.showMessageDialog(null, "Available quantity: " + drink.getQuantity());
                    return;
                }
                model.setValueAt(quantity, i, 2);

                // Cập nhật cột thành tiền
                double price = (double) model.getValueAt(i, 3);
                double subTotal = price * quantity;
                model.setValueAt(subTotal, i, 4);
                calculateTotal();
                return;
            }
        }

        // Nếu chưa tồn tại, thêm mới
        model.addRow(new Object[]{
            drink.getId(),
            drink.getName(),
            1, // Số lượng mặc định là 1
            drink.getPrice(), // Thành tiền = Giá
            drink.getPrice() // Tổng thành tiền
        });
        calculateTotal();
    }
    
    //--------------- BILL ---------------
    private double orderTotalPrice(ArrayList<OrderDetail> orderDetails){
        double totalPrice = 0;
        for(OrderDetail orderDetail : orderDetails){
            double drinkPrice = 0;
            for(Drink drink : drinks){
                if(drink.getId() == orderDetail.getDrinkId()){
                    drinkPrice = drink.getPrice();
                    break;
                }    
            }
            totalPrice += drinkPrice * orderDetail.getQuantity();
        }
        return totalPrice;
    }
    
    //--------------- ORDER HISTORY ---------------
    private void displayOrders(){
        this.orders = getCustomerOrders();
        
        DefaultTableModel defaultTableModel = (DefaultTableModel) this.jOrderHistoryTable.getModel();
        jOrderHistoryTable.setRowSelectionAllowed(true); // Cho phép chọn hàng
        jOrderHistoryTable.setColumnSelectionAllowed(false); // Không cho phép chọn cột
        defaultTableModel.setRowCount(0);
        
        for(Order order : orders){
            ArrayList<OrderDetail> orderDetails = order.getOrderDetails();
            double totalPrice = orderTotalPrice(orderDetails);
            Object[] row = {
                order.getId(),
                customerId,
                order.getOrderDate(),
                totalPrice
            };
            defaultTableModel.insertRow(0, row);
        }
    }
    
    private ArrayList getCustomerOrders(){
        ArrayList<Order> orders = new ArrayList<>();
        try (ClientHandler clientHandler = new ClientHandler("localhost", 12345)){
            clientHandler.sendEncryptedCommand("ORDER_HISTORY", customerId);
            orders = (ArrayList<Order>) clientHandler.getArrayObject();
        } catch (Exception e) {
            System.out.println(e);
            e.printStackTrace();
            return null;
        }
        return orders;
    }
    
    private void setupOrderTableSelectionListener() {
        // Lắng nghe sự kiện thay đổi lựa chọn trong bảng
        jOrderHistoryTable.getSelectionModel().addListSelectionListener(e -> {
            // Đảm bảo sự kiện không chạy hai lần do cập nhật cột
            if (!e.getValueIsAdjusting()) {
                int selectedRow = jOrderHistoryTable.getSelectedRow();
                if (selectedRow != -1) {
                    // Lấy dữ liệu từ hàng được chọn
                    int id = (int) jOrderHistoryTable.getValueAt(selectedRow, 0);
                    
                    ArrayList<OrderDetail> orderDetails = getOrderDetails(id);
                    loadDOrderDetailsTable(orderDetails);
                }
            }
        });
    }
    
    private ArrayList getOrderDetails(int id){
        ArrayList<OrderDetail> orderdetails = new ArrayList<>();
        for(Order order : orders){
            if(order.getId() == id) {
                orderdetails = order.getOrderDetails();
                break;
            }
        }
        return orderdetails;
    }
    
    private void loadDOrderDetailsTable(ArrayList<OrderDetail> orderDetails){
        DefaultTableModel defaultTableModel = (DefaultTableModel) this.jOrderDetailsTable.getModel();
        jOrderDetailsTable.setRowSelectionAllowed(true); // Cho phép chọn hàng
        jOrderDetailsTable.setColumnSelectionAllowed(false); // Không cho phép chọn cột
        defaultTableModel.setRowCount(0);
        for(OrderDetail orderDetail : orderDetails){
            String drinkName = "";
            double drinkPrice = 0;
            int drinkId = orderDetail.getDrinkId();
            for(Drink drink : drinks){
                if(drink.getId() == drinkId){
                    drinkName = drink.getName();
                    drinkPrice = drink.getPrice();
                    break;
                }
            }
            Object[] row = {
                drinkName,
                drinkPrice,
                orderDetail.getQuantity()
            };
            defaultTableModel.addRow(row);
        }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrPlaceOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable jBillTable;
    private javax.swing.JButton jBtnDeleteItem;
    private javax.swing.JButton jBtnPlaceOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTable jOrderDetailsTable;
    private javax.swing.JTable jOrderHistoryTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelDrinks;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel jTotal;
    // End of variables declaration//GEN-END:variables

}
