/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import dao.AdminDAO;
import dao.CustomerDAO;
import dao.DrinkDAO;
import dao.MachineDAO;
import dao.OrderDAO;
import dao.OrderDetailDAO;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import model.AddListener;
import model.Customer;
import model.Drink;
import model.Machine;
import model.Order;
import model.OrderDetail;
import javax.swing.SwingUtilities;
import model.Admin;
import utils.LogUtil;
import utils.PasswordUtil;

/**
 *
 * @author ADMIN
 */
public class FrManager extends javax.swing.JFrame {
    private DrinkDAO drinkDAO;
    private CustomerDAO customerDAO;
    private OrderDAO orderDAO;
    private OrderDetailDAO orderDetailDAO;
    private MachineDAO machineDAO;
    private AdminDAO adminDAO;
    private String selectedImgPath = "";
    private int adminId = -1;
    /**
     * Creates new form FrManageDrinks
     */
    public FrManager() {
        this.drinkDAO = new DrinkDAO();
        this.customerDAO = new CustomerDAO();
        this.orderDAO = new OrderDAO();
        this.orderDetailDAO = new OrderDetailDAO();
        this.machineDAO = new MachineDAO();
        this.adminDAO = new AdminDAO();
        this.adminId = 1;
        initComponents();
        loadCustomerTable();
        loadDDrinkTable();
        loadDOrderTable();
        loadMachineTable();
        loadAdminTable();
        setupCustomerTableSelectionListener();
        setupDrinkTableSelectionListener();
        setupOrderTableSelectionListener();
        setupMachineTableSelectionListener();
        setupAdminTableSelectionListener();
        jCustomerId.setEditable(false);
        jUsername.setEditable(false);
        jDrinkId.setEnabled(false);
        jMachineId.setEnabled(false);
    }
    
    public FrManager(int adminId) {
        this.drinkDAO = new DrinkDAO();
        this.customerDAO = new CustomerDAO();
        this.orderDAO = new OrderDAO();
        this.orderDetailDAO = new OrderDetailDAO();
        this.machineDAO = new MachineDAO();
        this.adminDAO = new AdminDAO();
        this.adminId = adminId;
        initComponents();
        loadCustomerTable();
        loadDDrinkTable();
        loadDOrderTable();
        loadMachineTable();
        loadAdminTable();
        setupCustomerTableSelectionListener();
        setupDrinkTableSelectionListener();
        setupOrderTableSelectionListener();
        setupMachineTableSelectionListener();
        setupAdminTableSelectionListener();
        jCustomerId.setEditable(false);
        jUsername.setEditable(false);
        jDrinkId.setEnabled(false);
        jMachineId.setEnabled(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        orderStatus = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jCustomerId = new javax.swing.JTextField();
        jUsername = new javax.swing.JTextField();
        jCustomerName = new javax.swing.JTextField();
        jPassword = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jCustomerTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jBtnAddCustomer = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jBtnDeleteCustomer = new javax.swing.JButton();
        jBtnEditCustomer = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jPhone = new javax.swing.JTextField();
        jEmail = new javax.swing.JTextField();
        jBtnSearchPhone = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jSearchPhone = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jDrinkId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jDrinkName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jDrinkPrice = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jDrinkQuantity = new javax.swing.JTextField();
        jBtnAddDrink = new javax.swing.JButton();
        jBtnDeleteDrink = new javax.swing.JButton();
        jBtnEditDrink = new javax.swing.JButton();
        jIsAvailable = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jDrinkTable = new javax.swing.JTable();
        jBtnSearchDrink = new javax.swing.JButton();
        jImgPath = new javax.swing.JLabel();
        jBtnSetDrinkImg = new javax.swing.JButton();
        jSearchDrinkName = new javax.swing.JTextField();
        jUpdateStatus = new javax.swing.JPanel();
        jOrderId = new javax.swing.JTextField();
        jOrderCustomerId = new javax.swing.JTextField();
        jOrderDate = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jOrderTable = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jOrderDetailsTable = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        jOrderMachienId = new javax.swing.JTextField();
        jRadPending = new javax.swing.JRadioButton();
        jRadConfirmed = new javax.swing.JRadioButton();
        jRadCancelled = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        jOrderMachineName = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jOrderTotalPrice = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jMachineId = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jMachineIpAddress = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jMachineName = new javax.swing.JTextField();
        jBtnSearchMachine = new javax.swing.JButton();
        jBtnAddMachine = new javax.swing.JButton();
        jBtnDeleteMachine = new javax.swing.JButton();
        jBtnEditMachine = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jMachineTable = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();
        jSearchMachineName = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jAdminId = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jAdminUsername = new javax.swing.JTextField();
        jAdminPassword = new javax.swing.JTextField();
        jBtnAddAmin = new javax.swing.JButton();
        jBtnDeleteAdmin = new javax.swing.JButton();
        jBtnEditAdmin = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jAdminTable = new javax.swing.JTable();
        jLabel26 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jCustomerId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCustomerId.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jCustomerId.setEnabled(false);

        jUsername.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jCustomerName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jPassword.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("Customers Management");

        jCustomerTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCustomerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Username", "Email", "Phone", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jCustomerTable.setColumnSelectionAllowed(true);
        jCustomerTable.setRowHeight(30);
        jScrollPane2.setViewportView(jCustomerTable);
        jCustomerTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("ID");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Username");

        jBtnAddCustomer.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnAddCustomer.setText("Add");
        jBtnAddCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddCustomerActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Name");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Password");

        jBtnDeleteCustomer.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnDeleteCustomer.setText("Delete");
        jBtnDeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDeleteCustomerActionPerformed(evt);
            }
        });

        jBtnEditCustomer.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnEditCustomer.setText("Edit");
        jBtnEditCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditCustomerActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel17.setText("Phone");

        jPhone.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jBtnSearchPhone.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnSearchPhone.setText("Search");
        jBtnSearchPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSearchPhoneActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel16.setText("Email");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                    .addComponent(jPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jSearchPhone)
                                        .addComponent(jCustomerName, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBtnSearchPhone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtnAddCustomer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtnDeleteCustomer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtnEditCustomer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 79, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSearchPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jBtnSearchPhone)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnAddCustomer))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnDeleteCustomer))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnEditCustomer)
                    .addComponent(jLabel17)
                    .addComponent(jPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Customer", jPanel2);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Drinks Management");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("ID");

        jDrinkId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jDrinkId.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jDrinkId.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Name");

        jDrinkName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Price");

        jDrinkPrice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Quantity");

        jDrinkQuantity.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jBtnAddDrink.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnAddDrink.setText("Add");
        jBtnAddDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddDrinkActionPerformed(evt);
            }
        });

        jBtnDeleteDrink.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnDeleteDrink.setText("Delete");
        jBtnDeleteDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDeleteDrinkActionPerformed(evt);
            }
        });

        jBtnEditDrink.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnEditDrink.setText("Edit");
        jBtnEditDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditDrinkActionPerformed(evt);
            }
        });

        jIsAvailable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jIsAvailable.setText("In Stock");

        jDrinkTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jDrinkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Price", "Quantity", "InStock", "Img path"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jDrinkTable.setColumnSelectionAllowed(true);
        jDrinkTable.setRowHeight(30);
        jDrinkTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jDrinkTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jDrinkTable);
        jDrinkTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jBtnSearchDrink.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnSearchDrink.setText("Search");
        jBtnSearchDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSearchDrinkActionPerformed(evt);
            }
        });

        jImgPath.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jImgPath.setText("Drink img");
        jImgPath.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jBtnSetDrinkImg.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnSetDrinkImg.setText("Set image");
        jBtnSetDrinkImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSetDrinkImgActionPerformed(evt);
            }
        });

        jSearchDrinkName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jImgPath, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnSearchDrink, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jDrinkId, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jDrinkPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(33, 33, 33)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 49, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDrinkQuantity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jDrinkName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSearchDrinkName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(45, 45, 45))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jBtnSetDrinkImg)
                                    .addComponent(jIsAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(461, 461, 461)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jBtnEditDrink, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBtnDeleteDrink, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jBtnAddDrink, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(19, 19, 19))
            .addComponent(jScrollPane1)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jBtnSearchDrink)
                    .addComponent(jSearchDrinkName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jImgPath, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jDrinkId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jDrinkName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtnAddDrink))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jDrinkPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jDrinkQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtnDeleteDrink))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBtnEditDrink)
                            .addComponent(jIsAvailable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnSetDrinkImg)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Drink", jPanel3);

        jOrderId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jOrderId.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jOrderId.setEnabled(false);

        jOrderCustomerId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jOrderCustomerId.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jOrderCustomerId.setEnabled(false);

        jOrderDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jOrderDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jOrderDate.setEnabled(false);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel11.setText("Orders Management");

        jOrderTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Customer id", "MachineId", "Order status", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jOrderTable.setColumnSelectionAllowed(true);
        jOrderTable.setRowHeight(30);
        jScrollPane3.setViewportView(jOrderTable);
        jOrderTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("ID");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Status");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setText("Customer Id");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setText("Date");

        jOrderDetailsTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jOrderDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "OrderID", "Drink Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jOrderDetailsTable.setRowHeight(30);
        jScrollPane4.setViewportView(jOrderDetailsTable);

        jLabel21.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel21.setText("Machine ID");

        jOrderMachienId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jOrderMachienId.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jOrderMachienId.setEnabled(false);

        orderStatus.add(jRadPending);
        jRadPending.setText("Pending");

        orderStatus.add(jRadConfirmed);
        jRadConfirmed.setText("Confirmed");

        orderStatus.add(jRadCancelled);
        jRadCancelled.setText("Cancelled");

        jButton1.setText("Update Status");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel27.setText("Machine name");

        jOrderMachineName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jOrderMachineName.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jOrderMachineName.setEnabled(false);

        jLabel28.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel28.setText("Total");

        jOrderTotalPrice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jOrderTotalPrice.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jOrderTotalPrice.setEnabled(false);

        javax.swing.GroupLayout jUpdateStatusLayout = new javax.swing.GroupLayout(jUpdateStatus);
        jUpdateStatus.setLayout(jUpdateStatusLayout);
        jUpdateStatusLayout.setHorizontalGroup(
            jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jUpdateStatusLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 852, Short.MAX_VALUE)
                    .addGroup(jUpdateStatusLayout.createSequentialGroup()
                        .addGroup(jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jUpdateStatusLayout.createSequentialGroup()
                                .addGroup(jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jUpdateStatusLayout.createSequentialGroup()
                                        .addGroup(jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jUpdateStatusLayout.createSequentialGroup()
                                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jUpdateStatusLayout.createSequentialGroup()
                                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jOrderMachienId, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel15)
                                            .addComponent(jLabel14))
                                        .addGap(12, 12, 12))
                                    .addGroup(jUpdateStatusLayout.createSequentialGroup()
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(jRadPending)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jRadConfirmed)
                                        .addGap(12, 12, 12)
                                        .addComponent(jRadCancelled, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31)))
                                .addGroup(jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addGroup(jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jUpdateStatusLayout.createSequentialGroup()
                                            .addComponent(jOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jOrderTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jUpdateStatusLayout.createSequentialGroup()
                                            .addComponent(jOrderCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel27)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jOrderMachineName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jScrollPane4))
                        .addGap(0, 16, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jUpdateStatusLayout.setVerticalGroup(
            jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jUpdateStatusLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addGroup(jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jOrderCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(jOrderMachineName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel28)
                        .addComponent(jOrderTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(jOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel21)
                        .addComponent(jOrderMachienId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14)
                .addGroup(jUpdateStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jRadPending)
                    .addComponent(jRadConfirmed)
                    .addComponent(jRadCancelled)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Order", jUpdateStatus);

        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel18.setText("ID");

        jMachineId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMachineId.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jMachineId.setEnabled(false);

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel19.setText("Machine IpAddress");

        jMachineIpAddress.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel20.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel20.setText("Machine name");

        jMachineName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jBtnSearchMachine.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnSearchMachine.setText("Search");
        jBtnSearchMachine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSearchMachineActionPerformed(evt);
            }
        });

        jBtnAddMachine.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnAddMachine.setText("Add");
        jBtnAddMachine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddMachineActionPerformed(evt);
            }
        });

        jBtnDeleteMachine.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnDeleteMachine.setText("Delete");
        jBtnDeleteMachine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDeleteMachineActionPerformed(evt);
            }
        });

        jBtnEditMachine.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnEditMachine.setText("Edit");
        jBtnEditMachine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditMachineActionPerformed(evt);
            }
        });

        jMachineTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMachineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "MachineIp Address", "Machine name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jMachineTable.setColumnSelectionAllowed(true);
        jMachineTable.setRowHeight(30);
        jScrollPane5.setViewportView(jMachineTable);
        jMachineTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel23.setText("Machine Management");

        jSearchMachineName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(46, 46, 46)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jMachineName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jMachineIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jMachineId, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel23))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBtnAddMachine, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtnDeleteMachine, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtnEditMachine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                        .addComponent(jSearchMachineName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBtnSearchMachine)
                        .addGap(81, 81, 81))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel20))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jMachineId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addGap(18, 18, 18)
                        .addComponent(jMachineIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jMachineName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBtnAddMachine)
                            .addComponent(jBtnSearchMachine)
                            .addComponent(jSearchMachineName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jBtnDeleteMachine)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnEditMachine)))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Machine", jPanel1);

        jAdminId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jAdminId.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jAdminId.setEnabled(false);

        jLabel22.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel22.setText("ID");

        jLabel24.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel24.setText("Username");

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel25.setText("Password");

        jAdminUsername.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jAdminUsername.setEnabled(false);

        jAdminPassword.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jBtnAddAmin.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnAddAmin.setText("Add");
        jBtnAddAmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddAminActionPerformed(evt);
            }
        });

        jBtnDeleteAdmin.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnDeleteAdmin.setText("Delete");
        jBtnDeleteAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDeleteAdminActionPerformed(evt);
            }
        });

        jBtnEditAdmin.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnEditAdmin.setText("Edit");
        jBtnEditAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditAdminActionPerformed(evt);
            }
        });

        jAdminTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jAdminTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Username", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jAdminTable.setRowHeight(30);
        jScrollPane6.setViewportView(jAdminTable);
        jAdminTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel26.setText("Admin Management");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(46, 46, 46)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jAdminPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jAdminUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jAdminId, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBtnAddAmin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtnDeleteAdmin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtnEditAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel26)
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel24)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel25))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jAdminId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jAdminUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jAdminPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jBtnAddAmin)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnDeleteAdmin)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnEditAdmin)))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addGap(34, 34, 34))
        );

        jTabbedPane1.addTab("Admin", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 893, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 811, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnSetDrinkImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSetDrinkImgActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setCurrentDirectory(new File("src/images"));
        
        int resultValue = fileChooser.showOpenDialog(this);
        if(resultValue == JFileChooser.APPROVE_OPTION){
            //Đọc ảnh
            try {
                File file = fileChooser.getSelectedFile();
                selectedImgPath = file.getPath();
                jImgPath.setIcon(new ImageIcon(selectedImgPath));
                //set ảnh vào label
            } catch (Exception e) {
            }
            
        }
    }//GEN-LAST:event_jBtnSetDrinkImgActionPerformed

    private void jBtnEditDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditDrinkActionPerformed
        // TODO add your handling code here:
        String strId = jDrinkId.getText();
        if(strId.equals("") ){
            JOptionPane.showMessageDialog(null, "Please select item");
            return;
        }
        int id = Integer.parseInt(strId);
        String name = jDrinkName.getText();
        double price = Double.parseDouble(jDrinkPrice.getText());
        int quantity = Integer.parseInt(jDrinkQuantity.getText());
        boolean isAvailable = false;
        String imgPath = selectedImgPath;
        
        if(jIsAvailable.isSelected())   isAvailable = true;
        Drink updatedDrink = new Drink(id, name, price, quantity, isAvailable, imgPath);
        
        boolean result = drinkDAO.update(updatedDrink);
        if (result) {
            LogUtil.info("Edit drink: " + strId);
            JOptionPane.showMessageDialog(null, "Edit drink successfully");
            loadDDrinkTable();
        } else {
            JOptionPane.showMessageDialog(null, "Failed to Edit drink");
        }
    }//GEN-LAST:event_jBtnEditDrinkActionPerformed

    private void jBtnDeleteDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDeleteDrinkActionPerformed
        // TODO add your handling code here:
        try {
            int drinkIdToDelete = Integer.parseInt(jDrinkId.getText());
            boolean result = drinkDAO.delete(drinkIdToDelete);

            if (result) {
                LogUtil.info("Delete drink: " + drinkIdToDelete);
                JOptionPane.showMessageDialog(null, "Delete drink successfully");
                loadDDrinkTable();
            } else {
                JOptionPane.showMessageDialog(null, "Failed to delete drink");
            }
        } catch (Exception e) {
            LogUtil.severe("Error during delete drink: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jBtnDeleteDrinkActionPerformed

    private void jBtnAddDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddDrinkActionPerformed
        // TODO add your handling code here:
        
        FrAddDrink frAddDrink = new FrAddDrink(new AddListener() {
        @Override
        public void onAdded() {
            loadDDrinkTable(); // Gọi hàm load lại bảng sau khi thêm khách hàng
        }
    });
        frAddDrink.setVisible(true);
    }//GEN-LAST:event_jBtnAddDrinkActionPerformed

    private void jBtnAddCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddCustomerActionPerformed
        // TODO add your handling code here:
        FrAddCustomer frAddCustomer = new FrAddCustomer(new AddListener() {
        @Override
        public void onAdded() {
            loadCustomerTable(); // Gọi hàm load lại bảng sau khi thêm khách hàng
        }
        });
        frAddCustomer.setVisible(true);
    }//GEN-LAST:event_jBtnAddCustomerActionPerformed

    private void jBtnDeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDeleteCustomerActionPerformed
        // TODO add your handling code here:
        try {
            int customerIdToDelete = Integer.parseInt(jCustomerId.getText());
            boolean result = customerDAO.delete(customerIdToDelete);

            if (result) {
                JOptionPane.showMessageDialog(null, "Delete customer successfully");
                LogUtil.info("Delete customer: " + customerIdToDelete);
                loadCustomerTable();
            } else {
                JOptionPane.showMessageDialog(null, "Failed to delete customer");
            }
        
        } catch (Exception ex) {
            // Các lỗi khác
            LogUtil.severe("Error during delete customer: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, "An error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jBtnDeleteCustomerActionPerformed

    private void jBtnEditCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditCustomerActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        String strId = jCustomerId.getText();
        if(strId.equals("") ){
            JOptionPane.showMessageDialog(null, "Please select customer");
            return;
        }
        int id = Integer.parseInt(strId);
        String name = jCustomerName.getText();
        String username = jUsername.getText();
        String email = jEmail.getText();
        String phone = jPhone.getText();
        String password = jPassword.getText();
        Customer oldCustomer = customerDAO.getById(id);
        
        String hashedPassword = password;
        if(!password.equals(oldCustomer.getPassword())){
            hashedPassword = PasswordUtil.hashPassword(password);
        }
        Customer updatedCustomer = new Customer(id, name, username, email, phone, hashedPassword);
        
        boolean result = customerDAO.update(updatedCustomer);
        if (result) {
            JOptionPane.showMessageDialog(null, "Edit customer successfully");
            LogUtil.info("Edit customer " + id);
            loadCustomerTable();
        } else {
            JOptionPane.showMessageDialog(null, "Failed to edit customer");
        }
    }//GEN-LAST:event_jBtnEditCustomerActionPerformed

    private void jBtnAddMachineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddMachineActionPerformed
        // TODO add your handling code here:
        FrAddMachine frAddMachine = new FrAddMachine(new AddListener() {
        @Override
        public void onAdded() {
            loadMachineTable(); // Gọi hàm load lại bảng sau khi thêm khách hàng
        }
        });
        frAddMachine.setVisible(true);
    }//GEN-LAST:event_jBtnAddMachineActionPerformed

    private void jBtnDeleteMachineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDeleteMachineActionPerformed
        // TODO add your handling code here:
        try {
            int machineIdToDelete = Integer.parseInt(jMachineId.getText());
            boolean result = machineDAO.delete(machineIdToDelete);

            if (result) {
                LogUtil.info("Delete machine: " + machineIdToDelete);
                JOptionPane.showMessageDialog(null, "Delete machine successfully");
                loadMachineTable();
            } else {
                JOptionPane.showMessageDialog(null, "Failed to delete machine");
            }
        
        } catch (Exception ex) {
            // Các lỗi khác
            LogUtil.severe("Error during delete machine: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, "An error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jBtnDeleteMachineActionPerformed

    private void jBtnEditMachineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditMachineActionPerformed
        // TODO add your handling code here:
        String strId = jMachineId.getText();
        if(strId.equals("") ){
            JOptionPane.showMessageDialog(null, "Please select machine");
            return;
        }
        int id = Integer.parseInt(strId);
        String name = jMachineName.getText();
        String ipAddress = jMachineIpAddress.getText();
        String email = jEmail.getText();
        String phone = jPhone.getText();
        String password = jPassword.getText();
        
        Machine updatedMachine = new Machine(id, name, ipAddress);
        
        boolean result = machineDAO.update(updatedMachine);
        if (result) {
            LogUtil.info("Edit machine: " + strId);
            JOptionPane.showMessageDialog(null, "Edit machine successfully");
            loadMachineTable();
        } else {
            JOptionPane.showMessageDialog(null, "Failed to edit machine");
        }
    }//GEN-LAST:event_jBtnEditMachineActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String strId = jOrderId.getText();
        if(strId.equals("") ){
            JOptionPane.showMessageDialog(null, "Please select Order");
            return;
        }
        int id = Integer.parseInt(strId);
        int customerId = Integer.parseInt(jOrderCustomerId.getText());
        String machineId = jOrderMachienId.getText();
        String date = jOrderDate.getText();
        String status;
        if(jRadPending.isSelected()) status = "Pending";
        else if(jRadConfirmed.isSelected()) status = "Confirmed";
        else status = "Cancelled";
        ArrayList<OrderDetail> orderDetails = orderDetailDAO.getByOrderId(id);
        
        Order updatedOrder = new Order(id, customerId, machineId, status, java.time.LocalDate.now().toString(), orderDetails);
        
        boolean result = orderDAO.update(updatedOrder);
        if (result) {
            LogUtil.info("Update order: " + strId);
            JOptionPane.showMessageDialog(null, "Edit order status successfully");
            loadDOrderTable();
        } else {
            JOptionPane.showMessageDialog(null, "Failed to edit order status");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jBtnSearchMachineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSearchMachineActionPerformed
        // TODO add your handling code here:
        String machineName = jSearchMachineName.getText();
        if("".equals(machineName)) {
              loadMachineTable();
              return;
        }
        ArrayList<Machine> machines = machineDAO.getByCondition("machineName LIKE ?", machineName + "%");
        if(machines.isEmpty()){
            JOptionPane.showMessageDialog(null, "Machine does not exist");
            loadMachineTable();
            return;
        }
        displaySearchMachineResult(machines);
    }//GEN-LAST:event_jBtnSearchMachineActionPerformed

    private void jBtnSearchPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSearchPhoneActionPerformed
        // TODO add your handling code here:
        String phoneNumber = jSearchPhone.getText();
        if("".equals(phoneNumber)) {
              loadCustomerTable();
              return;
        }
//        ArrayList<Customer> customers = customerDAO.getByCondition("phoneNumber = ?", phoneNumber);
        ArrayList<Customer> customers = customerDAO.getByCondition("phoneNumber LIKE ?", phoneNumber + "%");
        if(customers.isEmpty()){
            JOptionPane.showMessageDialog(null, "Phone number does not exist");
            loadCustomerTable();
            return;
        }
        disPlaySearchCustomerResult(customers);
    }//GEN-LAST:event_jBtnSearchPhoneActionPerformed

    private void jBtnSearchDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSearchDrinkActionPerformed
        // TODO add your handling code here:
        String drinkName = jSearchDrinkName.getText();
        if("".equals(drinkName)) {
              loadDDrinkTable();
              return;
        }
        ArrayList<Drink> drinks = drinkDAO.getByCondition("drinkname LIKE ?", drinkName + "%");
        if(drinks.isEmpty()){
            JOptionPane.showMessageDialog(null, "Drink does not exist");
            loadDDrinkTable();
            return;
        }
        displaySearchDrinkResult(drinks);
    }//GEN-LAST:event_jBtnSearchDrinkActionPerformed

    private void jBtnAddAminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddAminActionPerformed
        // TODO add your handling code here:
        FrAddAdmin frAddAdmin = new FrAddAdmin(new AddListener() {
        @Override
        public void onAdded() {
            loadAdminTable(); // Gọi hàm load lại bảng sau khi thêm khách hàng
        }
        });
        frAddAdmin.setVisible(true);
    }//GEN-LAST:event_jBtnAddAminActionPerformed

    private void jBtnEditAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditAdminActionPerformed
        // TODO add your handling code here:
        String strId = jAdminId.getText();
        if(strId.equals("") ){
            JOptionPane.showMessageDialog(null, "Please select admin");
            return;
        }
        int id = Integer.parseInt(strId);
        String username = jAdminUsername.getText();
        String password = jAdminPassword.getText();
        Admin oldAdmin = adminDAO.getById(id);
        
        String hashedPassword = password;
        if(!password.equals(oldAdmin.getPassword())){
            hashedPassword = PasswordUtil.hashPassword(password);
        }
        
        Admin updatedAdmin = new Admin(id, username, hashedPassword);
        
        boolean result = adminDAO.update(updatedAdmin);
        if (result) {
            JOptionPane.showMessageDialog(null, "Edit admin successfully");
            LogUtil.info("Edit admin " + id);
            loadAdminTable();
        } else {
            JOptionPane.showMessageDialog(null, "Failed to edit customer");
        }
    }//GEN-LAST:event_jBtnEditAdminActionPerformed

    private void jBtnDeleteAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDeleteAdminActionPerformed
        // TODO add your handling code here:
        try {
            int adminIdToDelete = Integer.parseInt(jAdminId.getText());
            if(adminId == adminIdToDelete){
                JOptionPane.showMessageDialog(null, "This account is working");
                return;
            }
            boolean result = adminDAO.delete(adminIdToDelete);

            if (result) {
                LogUtil.info("Delete admin: " + adminIdToDelete);
                JOptionPane.showMessageDialog(null, "Delete admin successfully");
                loadAdminTable();
            } else {
                JOptionPane.showMessageDialog(null, "Failed to delete admin");
            }

        } catch (Exception ex) {
            // Các lỗi khác
            LogUtil.severe("Error during delete admin: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, "An error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jBtnDeleteAdminActionPerformed

    private void loadCustomerTable(){
        ArrayList<Customer> customers = customerDAO.getAll();
        DefaultTableModel defaultTableModel = (DefaultTableModel) this.jCustomerTable.getModel();
        jCustomerTable.setRowSelectionAllowed(true); // Cho phép chọn hàng
        jCustomerTable.setColumnSelectionAllowed(false); // Không cho phép chọn cột
        defaultTableModel.setRowCount(0);
        
        for(Customer customer : customers){
            Object[] row = {
            customer.getId(),
            customer.getName(),
            customer.getUserName(),
            customer.getEmail(),
            customer.getPhoneNumber(),
            customer.getPassword()
        };
        defaultTableModel.addRow(row);
        }
    }
    
    private void disPlaySearchCustomerResult(ArrayList<Customer> customers){
        DefaultTableModel defaultTableModel = (DefaultTableModel) this.jCustomerTable.getModel();
        jCustomerTable.setRowSelectionAllowed(true); // Cho phép chọn hàng
        jCustomerTable.setColumnSelectionAllowed(false); // Không cho phép chọn cột
        defaultTableModel.setRowCount(0);
        
        for(Customer customer : customers){
            Object[] row = {
            customer.getId(),
            customer.getName(),
            customer.getUserName(),
            customer.getEmail(),
            customer.getPhoneNumber(),
            customer.getPassword()
        };
        defaultTableModel.addRow(row);
        }
    }
    
    private void displaySearchDrinkResult(ArrayList<Drink> drinks){
        DefaultTableModel defaultTableModel = (DefaultTableModel) this.jDrinkTable.getModel();
        jDrinkTable.setRowSelectionAllowed(true); // Cho phép chọn hàng
        jDrinkTable.setColumnSelectionAllowed(false); // Không cho phép chọn cột
        defaultTableModel.setRowCount(0);
        
        for(Drink drink : drinks){
            Object[] row = {
                drink.getId(),
                drink.getName(),
                drink.getPrice(),
                drink.getQuantity(),
                drink.isAvailable() ? "Có" : "Không",
                drink.getImgPath()
            };
            defaultTableModel.addRow(row);
        }
    }
    
    private void loadDDrinkTable(){
        ArrayList<Drink> drinks = drinkDAO.getAll();
        DefaultTableModel defaultTableModel = (DefaultTableModel) this.jDrinkTable.getModel();
        jDrinkTable.setRowSelectionAllowed(true); // Cho phép chọn hàng
        jDrinkTable.setColumnSelectionAllowed(false); // Không cho phép chọn cột
        
        defaultTableModel.setRowCount(0);
        for(Drink drink : drinks){
            Object[] row = {
                drink.getId(),
                drink.getName(),
                drink.getPrice(),
                drink.getQuantity(),
                drink.isAvailable() ? "Có" : "Không",
                drink.getImgPath()
            };
            defaultTableModel.addRow(row);
        }
    }
    
    private void loadDOrderTable(){
        ArrayList<Order> orders = orderDAO.getAll();
        DefaultTableModel defaultTableModel = (DefaultTableModel) this.jOrderTable.getModel();
        jOrderTable.setRowSelectionAllowed(true); // Cho phép chọn hàng
        jOrderTable.setColumnSelectionAllowed(false); // Không cho phép chọn cột
        defaultTableModel.setRowCount(0);
        
        for(Order order : orders){
            int customerId = order.getCustomerId();
            Customer customer = customerDAO.getById(customerId);
            String customerName = customer.getName();
            
            String machineIp = order.getMachineId();
            Object[] row = {
                order.getId(),
                customerId,
                machineIp,
                order.getOrderStatus(),
                order.getOrderDate()
            };
            defaultTableModel.insertRow(0, row);
        }
    }
    
    public void refreshOrderTable() {
        SwingUtilities.invokeLater(() -> loadDOrderTable());
        SwingUtilities.invokeLater(() -> loadDDrinkTable());
    }

    
    private void loadDOrderDetailsTable(int id){
        ArrayList<OrderDetail> orderDetails = orderDetailDAO.getByOrderId(id);
        DefaultTableModel defaultTableModel = (DefaultTableModel) this.jOrderDetailsTable.getModel();
        jOrderDetailsTable.setRowSelectionAllowed(true); // Cho phép chọn hàng
        jOrderDetailsTable.setColumnSelectionAllowed(false); // Không cho phép chọn cột
        defaultTableModel.setRowCount(0);
        
        double totalPrice = 0;
        for(OrderDetail orderDetail : orderDetails){
            int drinkId = orderDetail.getDrinkId();
            Drink drink = drinkDAO.getById(drinkId);
            double price = drink.getPrice() * orderDetail.getQuantity();
            String drinkName = drink.getName();
            totalPrice += price;
            Object[] row = {
                orderDetail.getId(),
                orderDetail.getOrderId(),
                drinkName,
                orderDetail.getQuantity(),
                price,
            };
            defaultTableModel.addRow(row);
        }
        jOrderTotalPrice.setText(String.valueOf(totalPrice));
    }
    
    private void loadMachineTable(){
        ArrayList<Machine> machines = machineDAO.getAll();
        DefaultTableModel defaultTableModel = (DefaultTableModel) this.jMachineTable.getModel();
        jMachineTable.setRowSelectionAllowed(true); // Cho phép chọn hàng
        jMachineTable.setColumnSelectionAllowed(false); // Không cho phép chọn cột
        defaultTableModel.setRowCount(0);
        
        for(Machine machine : machines){
            Object[] row = {
                machine.getId(),
                machine.getMachineId(),
                machine.getMachineName(),
            };
            defaultTableModel.addRow(row);
        }
    }
    
    private void displaySearchMachineResult(ArrayList<Machine> machines){
        DefaultTableModel defaultTableModel = (DefaultTableModel) this.jMachineTable.getModel();
        jMachineTable.setRowSelectionAllowed(true); // Cho phép chọn hàng
        jMachineTable.setColumnSelectionAllowed(false); // Không cho phép chọn cột
        defaultTableModel.setRowCount(0);
        
        for(Machine machine : machines){
            Object[] row = {
                machine.getId(),
                machine.getMachineId(),
                machine.getMachineName(),
            };
            defaultTableModel.addRow(row);
        }
    }
    
    private void loadAdminTable(){
        ArrayList<Admin> admins = adminDAO.getAll();
        DefaultTableModel defaultTableModel = (DefaultTableModel) this.jAdminTable.getModel();
        jAdminTable.setRowSelectionAllowed(true); // Cho phép chọn hàng
        jAdminTable.setColumnSelectionAllowed(false); // Không cho phép chọn cột
        defaultTableModel.setRowCount(0);
        
        for(Admin admin : admins){
            Object[] row = {
                admin.getId(),
                admin.getUserName(),
                admin.getPassword(),
            };
            defaultTableModel.addRow(row);
        }
    }
    
    private void setupDrinkTableSelectionListener() {
        // Lắng nghe sự kiện thay đổi lựa chọn trong bảng
        jDrinkTable.getSelectionModel().addListSelectionListener(e -> {
            // Đảm bảo sự kiện không chạy hai lần do cập nhật cột
            if (!e.getValueIsAdjusting()) {
                int selectedRow = jDrinkTable.getSelectedRow();
                if (selectedRow != -1) {
                    // Lấy dữ liệu từ hàng được chọn
                    int id = (int) jDrinkTable.getValueAt(selectedRow, 0);
                    String name = (String) jDrinkTable.getValueAt(selectedRow, 1);
                    double price = (double) jDrinkTable.getValueAt(selectedRow, 2);
                    int quantity = (int) jDrinkTable.getValueAt(selectedRow, 3);
                    String isAvailable = (String) jDrinkTable.getValueAt(selectedRow, 4);
                    String imgPath = (String) jDrinkTable.getValueAt(selectedRow, 5);
                    
                    // Hiển thị thông tin lên các JTextField
                    jDrinkId.setText(String.valueOf(id));
                    jDrinkName.setText(name);
                    jDrinkPrice.setText(String.valueOf(price));
                    jDrinkQuantity.setText(String.valueOf(quantity));
                    jImgPath.setIcon(new ImageIcon(imgPath));
                    jImgPath.setText(imgPath);
                    selectedImgPath = jImgPath.getText();
                    if(isAvailable == "Có"){
                        jIsAvailable.setSelected(true);
                    }
                    else jIsAvailable.setSelected(false);
                }
            }
        });
    }
    
    private void setupCustomerTableSelectionListener() {
        // Lắng nghe sự kiện thay đổi lựa chọn trong bảng
        jCustomerTable.getSelectionModel().addListSelectionListener(e -> {
            // Đảm bảo sự kiện không chạy hai lần do cập nhật cột
            if (!e.getValueIsAdjusting()) {
                int selectedRow = jCustomerTable.getSelectedRow();
                if (selectedRow != -1) {
                    // Lấy dữ liệu từ hàng được chọn
                    int id = (int) jCustomerTable.getValueAt(selectedRow, 0);
                    String name = (String) jCustomerTable.getValueAt(selectedRow, 1);
                    String username = (String) jCustomerTable.getValueAt(selectedRow, 2);
                    String email = (String) jCustomerTable.getValueAt(selectedRow, 3);
                    String phone = (String) jCustomerTable.getValueAt(selectedRow, 4);
                    String password = (String) jCustomerTable.getValueAt(selectedRow, 5);

                    // Hiển thị thông tin lên các JTextField
                    jCustomerId.setText(String.valueOf(id));
                    jCustomerName.setText(name);
                    jUsername.setText(username);
                    jEmail.setText(email);
                    jPhone.setText(phone);
                    jPassword.setText(password);
                }
            }
        });
    }
    
    private void setupOrderTableSelectionListener() {
        // Lắng nghe sự kiện thay đổi lựa chọn trong bảng
        jOrderTable.getSelectionModel().addListSelectionListener(e -> {
            // Đảm bảo sự kiện không chạy hai lần do cập nhật cột
            if (!e.getValueIsAdjusting()) {
                int selectedRow = jOrderTable.getSelectedRow();
                if (selectedRow != -1) {
                    // Lấy dữ liệu từ hàng được chọn
                    int id = (int) jOrderTable.getValueAt(selectedRow, 0);
                    int customeId = (int) jOrderTable.getValueAt(selectedRow, 1);
                    String machineIp = (String) jOrderTable.getValueAt(selectedRow, 2);
                    String orderStatus = (String) jOrderTable.getValueAt(selectedRow, 3);
                    String orderDate = (String) jOrderTable.getValueAt(selectedRow, 4);
                    Machine machine = machineDAO.getByMachineId(machineIp);
                    String machineName = machine.getMachineName();
                    // Hiển thị thông tin lên các JTextField
                    jOrderId.setText(String.valueOf(id));
                    jOrderCustomerId.setText(String.valueOf(customeId));
                    jOrderMachienId.setText(machineIp);
                    jOrderMachineName.setText(machineName);
                    if("Pending".equals(orderStatus)) jRadPending.setSelected(true);
                    else if ("Confirmed".equals(orderStatus)) jRadConfirmed.setSelected(true);
                    else jRadCancelled.setSelected(true);
                    
                    jOrderDate.setText(orderDate);
                    loadDOrderDetailsTable(id);
                }
            }
        });
    }
    
    private void setupMachineTableSelectionListener() {
        // Lắng nghe sự kiện thay đổi lựa chọn trong bảng
        jMachineTable.getSelectionModel().addListSelectionListener(e -> {
            // Đảm bảo sự kiện không chạy hai lần do cập nhật cột
            if (!e.getValueIsAdjusting()) {
                int selectedRow = jMachineTable.getSelectedRow();
                if (selectedRow != -1) {
                    // Lấy dữ liệu từ hàng được chọn
                    int id = (int) jMachineTable.getValueAt(selectedRow, 0);
                    String machineIpAddress = (String) jMachineTable.getValueAt(selectedRow, 1);
                    String name = (String) jMachineTable.getValueAt(selectedRow, 2);

                    // Hiển thị thông tin lên các JTextField
                    jMachineId.setText(String.valueOf(id));
                    jMachineName.setText(name);
                    jMachineIpAddress.setText(machineIpAddress);
                }
            }
        });
    }
    
    private void setupAdminTableSelectionListener() {
        // Lắng nghe sự kiện thay đổi lựa chọn trong bảng
        jAdminTable.getSelectionModel().addListSelectionListener(e -> {
            // Đảm bảo sự kiện không chạy hai lần do cập nhật cột
            if (!e.getValueIsAdjusting()) {
                int selectedRow = jAdminTable.getSelectedRow();
                if (selectedRow != -1) {
                    // Lấy dữ liệu từ hàng được chọn
                    int id = (int) jAdminTable.getValueAt(selectedRow, 0);
                    String username = (String) jAdminTable.getValueAt(selectedRow, 1);
                    String password = (String) jAdminTable.getValueAt(selectedRow, 2);

                    // Hiển thị thông tin lên các JTextField
                    jAdminId.setText(String.valueOf(id));
                    jAdminUsername.setText(username);
                    jAdminPassword.setText(password);
                }
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
        }


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jAdminId;
    private javax.swing.JTextField jAdminPassword;
    private javax.swing.JTable jAdminTable;
    private javax.swing.JTextField jAdminUsername;
    private javax.swing.JButton jBtnAddAmin;
    private javax.swing.JButton jBtnAddCustomer;
    private javax.swing.JButton jBtnAddDrink;
    private javax.swing.JButton jBtnAddMachine;
    private javax.swing.JButton jBtnDeleteAdmin;
    private javax.swing.JButton jBtnDeleteCustomer;
    private javax.swing.JButton jBtnDeleteDrink;
    private javax.swing.JButton jBtnDeleteMachine;
    private javax.swing.JButton jBtnEditAdmin;
    private javax.swing.JButton jBtnEditCustomer;
    private javax.swing.JButton jBtnEditDrink;
    private javax.swing.JButton jBtnEditMachine;
    private javax.swing.JButton jBtnSearchDrink;
    private javax.swing.JButton jBtnSearchMachine;
    private javax.swing.JButton jBtnSearchPhone;
    private javax.swing.JButton jBtnSetDrinkImg;
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField jCustomerId;
    private javax.swing.JTextField jCustomerName;
    private javax.swing.JTable jCustomerTable;
    private javax.swing.JTextField jDrinkId;
    private javax.swing.JTextField jDrinkName;
    private javax.swing.JTextField jDrinkPrice;
    private javax.swing.JTextField jDrinkQuantity;
    private javax.swing.JTable jDrinkTable;
    private javax.swing.JTextField jEmail;
    private javax.swing.JLabel jImgPath;
    private javax.swing.JCheckBox jIsAvailable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jMachineId;
    private javax.swing.JTextField jMachineIpAddress;
    private javax.swing.JTextField jMachineName;
    private javax.swing.JTable jMachineTable;
    private javax.swing.JTextField jOrderCustomerId;
    private javax.swing.JTextField jOrderDate;
    private javax.swing.JTable jOrderDetailsTable;
    private javax.swing.JTextField jOrderId;
    private javax.swing.JTextField jOrderMachienId;
    private javax.swing.JTextField jOrderMachineName;
    private javax.swing.JTable jOrderTable;
    private javax.swing.JTextField jOrderTotalPrice;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField jPassword;
    private javax.swing.JTextField jPhone;
    private javax.swing.JRadioButton jRadCancelled;
    private javax.swing.JRadioButton jRadConfirmed;
    private javax.swing.JRadioButton jRadPending;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField jSearchDrinkName;
    private javax.swing.JTextField jSearchMachineName;
    private javax.swing.JTextField jSearchPhone;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel jUpdateStatus;
    private javax.swing.JTextField jUsername;
    private javax.swing.ButtonGroup orderStatus;
    // End of variables declaration//GEN-END:variables
}
